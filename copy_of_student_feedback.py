# -*- coding: utf-8 -*-
"""Copy of student_feedback.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x5Rwai7_VWPA5VhqC7Tj2GMhbxhDc-Em

## Step 1: Import Libraries & Load Dataset

In this step, we imported Python libraries like pandas, matplotlib, and seaborn
to help with data analysis and visualization.

We then loaded our dataset `student_feedback.csv` into a pandas DataFrame.
This dataset contains feedback ratings from students on various teaching aspects, such as:
- Subject expertise
- Explaining concepts clearly
- Use of presentations
- Solving doubts
- Course structure and relevance

Checking the shape and first few rows of the data confirmed it loaded correctly.
"""

!pip install textblob
!pip install wordcloud

# Data handling
import pandas as pd

# Visualization
import matplotlib.pyplot as plt
import seaborn as sns

# NLP sentiment analysis
from textblob import TextBlob

# Word cloud (optional but useful)
from wordcloud import WordCloud

df = pd.read_csv('/content/student_feedback.csv')

"""## Step 2: Data Cleaning

To prepare our data for analysis, we:
- Removed unnecessary columns (`'Unnamed: 0'` which was just an index).
- Checked for missing values (none were found).
- Ensured all rating columns are numeric.
- Verified column names and data types.

Clean and consistent data ensures that our analysis and visualizations are accurate.

"""

df.head()

print(df.columns)

print("Number of rows and columns:", df.shape)

# Drop the 'Unnamed: 0' column
df = df.drop(columns=['Unnamed: 0'])

print(df.isnull().sum())

print(df.dtypes)

cols = df.columns.drop('Student ID')  # exclude Student ID
df[cols] = df[cols].apply(pd.to_numeric, errors='coerce')

print(df.isnull().sum())

"""## Step 3: Data Exploration

We explored the dataset to understand basic statistics:
- Used `.describe()` to see mean, median, min, max, and standard deviation for each question.
- Reviewed unique values and checked for outliers or unexpected ratings.

Key insights:
- Ratings seem to be mostly high, with averages close to the upper end of the scale.
- No missing data or obvious anomalies.

This step helps build an initial understanding before deeper analysis.

"""

print(df.describe())

print(df['Student ID'].duplicated().sum())

# Get list of rating columns (excluding Student ID)
rating_cols = df.columns.drop('Student ID')

# Calculate average rating for each question
average_ratings = df[rating_cols].mean().sort_values(ascending=False)

print(average_ratings)

"""## Step 4: Average Ratings & Visualizations

We calculated the average rating for each feedback question to identify which aspects students rated highest and lowest.

We visualized these averages using a bar chart:
- Adding data labels above bars helps quickly see exact scores.
- Adjusting the Y-axis (`plt.ylim(4,5)`) highlights even small differences.

Observations:
- Some questions have slightly higher average scores than others.
- All aspects generally received high ratings, showing overall positive feedback.


"""

import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
average_ratings.plot(kind='bar', color='skyblue')
plt.title('Average Ratings per Feedback Question')
plt.ylabel('Average Rating')
plt.ylim(0, 5)  # Ratings likely from 1‚Äì5
plt.xticks(rotation=45, ha='right')
plt.show()

plt.figure(figsize=(10,6))
ax = average_ratings.plot(kind='bar', color='skyblue')
plt.title('Average Ratings per Feedback Question')
plt.ylabel('Average Rating')
plt.ylim(4, 5)
plt.xticks(rotation=45, ha='right')

# Add labels on top of bars
for i in ax.patches:
    ax.text(i.get_x() + i.get_width()/2, i.get_height() + 0.01,
            round(i.get_height(),2), ha='center', fontsize=10)
plt.show()

df[rating_cols].plot(kind='box', figsize=(10,6))
plt.title('Distribution of Ratings by Question')
plt.ylabel('Rating')
plt.show()

"""## Step 4 (continued): Boxplot - Distribution of Ratings

We created a boxplot to see how ratings are spread out for each question:
- The box shows the middle 50% of responses.
- The line inside the box is the median rating.
- Whiskers show the overall range.

Observations:
- Some questions have wider spreads, meaning students had mixed opinions.
- Others have tighter boxes, showing most students rated similarly.
- The median for most questions is high, reinforcing positive feedback.

The boxplot complements the average ratings by showing variability in responses.

## Step 5: Sentiment Analysis

Our dataset did not include free-text comments, so direct sentiment analysis could not be performed.

In future surveys, adding a comments field would help:
- Understand reasons behind ratings
- Capture qualitative feedback
- Identify recurring positive or negative themes

If text feedback were available, we could use tools like TextBlob or VADER to classify comments as positive, neutral, or negative and visualize them.

# üìä College Event Feedback Analysis ‚Äì Mini Dashboard

This dashboard summarizes the key insights from analyzing student feedback on various teaching aspects.
"""

# Highest rated question
highest = average_ratings.idxmax()
highest_score = round(average_ratings.max(), 2)

# Lowest rated question
lowest = average_ratings.idxmin()
lowest_score = round(average_ratings.min(), 2)

# Overall average across all questions
overall_avg = round(df[rating_cols].mean().mean(), 2)

print("Highest rated aspect:", highest, "with average score of", highest_score)
print("Lowest rated aspect:", lowest, "with average score of", lowest_score)
print("Overall average rating:", overall_avg)

"""## Key Metrics

- üìå **Highest rated aspect:** `Explains concepts in an understandable way` ‚Äì average score: 5.66
- üìå **Lowest rated aspect:** `Degree of difficulty of assignments` ‚Äì average score: 5.43
- ‚≠ê **Overall average rating across all aspects:** 5.55

*(Replace with your actual numbers after running the code)*

"""

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(8,6))
corr = df[rating_cols].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation between Feedback Questions')
plt.show()

"""### üî• Correlation Heatmap

This heatmap shows how ratings for different aspects relate to each other.
Higher correlation (closer to 1) means students who rated one aspect highly also rated the other highly.

"""

plt.figure(figsize=(8,5))
df['Degree of difficulty of assignments'].plot(kind='hist', bins=10, color='purple', edgecolor='black')
plt.title('Distribution of Ratings: Degree of Difficulty of Assignments')
plt.xlabel('Rating')
plt.ylabel('Number of Students')
plt.show()

"""### üì¶ Histogram: Degree of Difficulty of Assignments

Shows how students rated the difficulty. Helps spot if most students rated it similarly or if ratings were spread out.

"""

plt.figure(figsize=(10,6))
sns.violinplot(data=df[rating_cols], inner='quartile', palette='Pastel1')
plt.xticks(rotation=45, ha='right')
plt.title('Violin Plot: Distribution of Ratings by Question')
plt.ylabel('Rating')
plt.show()

"""### üéª Violin Plot: Rating Distributions

Combines boxplot with density to show where most ratings are concentrated for each question.

"""

# Create DataFrame from average_ratings
avg_df = average_ratings.reset_index()
avg_df.columns = ['Question', 'Average Rating']
avg_df

"""### üìã Table: Average Ratings per Question
A quick tabular view of average scores.

"""

plt.figure(figsize=(10,6))
average_ratings.sort_values(ascending=True).plot(kind='barh', color='skyblue')
plt.title('Average Ratings per Feedback Question')
plt.xlabel('Average Rating')
plt.xlim(0,10)
plt.show()

"""### üìã Table: Average Ratings per Question

A quick tabular summary of average scores.

## ‚úÖ Insights & Recommendations

- Students gave high average ratings on all aspects, suggesting strong satisfaction.
- Slightly lower scores on ‚ÄúDegree of difficulty of assignments‚Äù may need attention.
- The correlation heatmap shows strong relationships among some aspects, meaning students who liked one also liked others.
- Recommend adding free-text comments in future surveys to get qualitative insights.

Overall, feedback shows a very positive student sentiment with minor areas for improvement.

## Final Summary & Recommendations

- The average ratings were high across all feedback questions, showing overall student satisfaction.
- The boxplot showed that while most ratings are clustered high, some questions had wider spread indicating mixed views.
- Sentiment analysis wasn‚Äôt possible because the dataset had only numeric ratings.
- Recommendation: future surveys should include free-text comments for richer qualitative insights.

Overall, students rated the course and teaching very positively, and only minor areas for improvement were identified.
"""